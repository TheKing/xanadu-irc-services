/* Include Anope's module header */
#include "module.h"

/* define the module author and version */
#define AUTHOR "Liber"
#define VERSION "1.0"

/* declare functions here */
int log_joins(int argc, char **argv); //log the joins
int log_parts(int argc, char **argv); //log the parts
int botserv_join(int argc, char **argv); //botserv bot joins a channel
void LogChanInit(void); //run logchan

int botserv_join(int argc, char **argv) 
{
	User *u;
	Channel *ci;
	/* [0] = channel, [1] = user
		/* sanity check */
		if (!(u = finduser(argv[1])) || !(ci = findchan(argv[0]))) 
		{
			alog("Unable to locate %s (user) or %s (channel)", argv[0], argv[1]);
			return MOD_CONT;
		}
		
		
	alog("logchan: BotServ Bot %s 



void LogChanInIt(void) 
{
	logchan = 1;
}

int AnopeInit(int argc, char **argv)
{
    EvtHook *hook;       /* Event Hook Variable */
    int status;          /* Status for when we add the event */
	LogChanInit(); /* enable the logchannel */ 
    hook = createEventHook(EVENT_JOIN_CHANNEL, log_joins);
    status = moduleAddEventHook(hook);
	    if (status != MOD_ERR_OK) {
           	alog("Error binding to event EVENT_JOIN_CHANNEL [%d]", status);
            return MOD_STOP;
    	} 
    hook = createEventHook(EVENT_PART_CHANNEL, log_parts);
    status = moduleAddEventHook(hook);
    	if (status != MOD_ERR_OK) {
    		alog("Error binding to event EVENT_PART_CHANNEL [%d]", status);
    		return MOD_CONT;
    	}
    	   	
    moduleAddAuthor(AUTHOR);       /* Add the author information  */
    moduleAddVersion(VERSION);     /* Add the version information */
    moduleSetType(THIRD);          /* Flag as Third party module  */


    alog("[logchan] Loaded Successfully");

    return MOD_CONT;
}



int log_joins(int argc, char **argv) {
User *u;

u = finduser(argv[1]);


	if (!argv[1] || !argv[2]) {
		return MOD_CONT;
	}

	if(stricmp(argv[0], EVENT_STOP) == 0) {
	alog("\002Join\002: %s (%s@%s => %s@%s) joins %s", argv[1], u->username, u->hostip, u->vident, u->vhost, argv[2]);
	}
return MOD_CONT;
}

int log_parts(int argc, char **argv) {
User *u;

u = finduser(argv[1]);

    if (!argv[1] || !argv[2]) {
       return MOD_CONT;
    }

    if (stricmp(argv[0], EVENT_STOP) == 0) {
       alog("\002Part\002: %s (%s@%s => %s@%s) parts %s", argv[1], u->username, u->hostip, u->vident, u->vhost, argv[2]);   
    }
return MOD_CONT;
}

		                                                
